snippet mrmc
	remove_column :${1:table}, :${2:column}

snippet mapc
	${1:map}.${2:connect} '${3:controller/:action/:id}'

snippet defupdate
	def update
	  if @${1:model_instance_name}.update_attributes(params[:$1])
	  	flash[:notice] = '$2 was successfully updated.'
	  	redirect_to(@$1) 
	  else
	  	render :action => "edit" 
	  end
	end${3}

snippet mapca
	${1:map}.catch_all "*${2:anything}", :controller => "${3:default}", :action => "${4:error}"${5}

snippet hmd
	has_many :<+object+>s<+, :class_name => "<+object+>", :foreign_key => "<+reference+>_id"+>, :dependent => :destroy<++>

snippet rest
	respond_to do |f|
		f.html
		f.js do
			${1:render}
		end
	end

snippet bt
	belongs_to :${1:association}

snippet mcol
	remove_column :${1:table}, :${2:column}

snippet logd
	logger.debug { "${1:message}" }${2}

snippet artnp
	assert_redirected_to <+<+parent+>_<+child+>_path(<+@<+parent+>+>, <+@<+child+>+>)+>

snippet log
	RAILS_DEFAULT_LOGGER.${1:debug} ${2}

snippet crw
	cattr_accessor :${1:attr_names}

snippet tref
	t.references :${1:model}

snippet mac
	add_column :${1:table}, :${2:column}, :${3:type}

snippet rxml
	render :xml => ${1:text to render}

snippet rpo
	render :partial => "<+item+>", :object => <+@<+item+>+>

snippet xdelete
	xhr :delete, :${1:destroy}, :id => ${2:1}${3}

snippet vao
	validates_acceptance_of :${1:terms}

snippet pid
	params[:${1}id]

snippet mct
	create_table :${1} do |t|
		t.${2:integer} :${3}
	end

snippet vu
	validates_uniqueness_of :${1:attribute}

snippet artnpp
	assert_redirected_to <+<+parent+>_<+child+>_path(<+@<+parent+>+>)+>

snippet maprs
	${1:map}.resources :${2:resource}

snippet xpost
	xhr :post, :${1:create}, :${2:object} => { ${3} }

snippet mapwo
	${1:map}.with_options :${2:controller} => '${3:thing}' do |$3|
		${4}
	end

snippet vpo
	validates_presence_of :${1:attribute}

snippet rn
	render :nothing => ${1:true}

snippet defnew
	def new
		@${1:model_class_name} = ${2:ModelClassName}.new
	end${3}

snippet hm
	has_many :${1:object}

snippet ru
	render :update do |${1:page}|
		$1.${2}
	end

snippet mbs
	before_save :${1:method}

snippet rit
	render :inline => "${1:<%= 'hello' %>}", :type => ${2::rxml}

snippet mapr
	${1:map}.resource :${2:resource}

snippet hmt
	has_many :${1:object}, :through => :${2:object}

snippet mp
	map(&:${1:id})

snippet tcbi
	t.binary :${1}, :limit => ${2:2.megabytes}

snippet migration
	class ${1:`Snippet_MigrationNameFromFilename()`} < ActiveRecord::Migration
		def self.up
			${2}
		end
	
		def self.down
		end
	end

snippet sc
	scope :${1}, :${2:conditions} => ${3}

snippet mctmm
	create_table :${1:}, :id => false do |t|
		t.integer :${2:}_id
		t.integer :${3:}_id
	end
	
	
	add_index :$1, :$2_id
	add_index :$1, [:$3_id, :$2_id], :unique => true
	
	add_foreign_key :$1, :$2_id, :references => :$2s, :on_delete => :cascade
	add_foreign_key :$1, :$3_id, :references => :$3s, :on_delete => :cascade

snippet artpp
	assert_redirected_to <+<+model+>s_path+>

snippet bfm
	before_filter :${1:method}, ${2}
	
	def $1
	  ${3}
	end

snippet ri
	render :inline => "<+<%= 'hello' %>+>"

snippet tcs
	t.string :${1:title}

snippet sweeper
	class ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper
		observe $1
	
		def after_save(${2:model_class_name})
			expire_cache($2)
		end
	
		def after_destroy($2)
			expire_cache($2)
		end
	
		def expire_cache($2)
			expire_page
		end
	end

snippet ns
	named_scope :${1}, :${2:conditions} => ${3}

snippet defindex
	def index
		@${1:model_class_name} = ${2:ModelClassName}.all
	end${3}

snippet defcreate
	def create
		@${1:model_class_name} = ${2:ModelClassName}.new(params[:$1])
	
		if @$1.save
			flash[:notice] = '$2 was successfully created.'
			redirect_to(@$1) 
		else
			render :action => "new" 
		end
	end

snippet rtl
	render :text => "${1:text to render}", :layout => "${2:layoutname}"

snippet defshow
	def show
	
	end${3}

snippet va
	validates_associated :${1:attribute}

snippet ve
	validates_exclusion_of :${1:attribute}, :in => ${2:%w( mov avi )}

snippet rts
	render :text => "${1:text to render}", :status => ${2:401}

snippet mcht
	change_table :${1:table_name} do |t|
		${2}
	end

snippet fpid
	find(params[:${1}id])

snippet rpc
	render :partial => "<+item+>", :collection => <+@<+item+>s+>

snippet tcts
	t.timestamp :${1:title}
	${2}

snippet rtlt
	render :text => "${1:text to render}", :layout => ${2:true}

snippet tcr
	t.references :${1}, :polymorphic = { :default => '${2}' }

snippet dso
	default_scope :order => "${1:created_at desc}"

snippet tcda
	t.date :${1:date}

snippet rjson
	render :json => ${1:text to render}

snippet art
	assert_redirected_to ${1::action => "${2:index}"}

snippet tcl
	t.integer :lock_version, :null => false, :default => 0

snippet ra
	render :action => "${1:action}"

snippet rfu
	render :file => "${1:filepath}", :use_full_path => ${2:false}

snippet nsp
	named_scope :${1}, lambda { |${2}| 
	  { 
	    :${3:conditions} => ${4},
	  } 
	}

snippet xput
	xhr :put, :${1:update}, :id => ${2:1}, :${3:object} => { ${4} }${5}

snippet asnd
	assert_no_difference "${1:Model}.${2:count}" do
		${3}
	end

snippet xget
	xhr :get, :<+show+><+, :id => <+1+>+><++>

snippet tcd
	t.decimal :${1:value}, :precision => ${2:2}, :scale => ${3:10}

snippet ass
	assert_select '<+path+>'<+, :<+text+> => <+'<+inner_html+>'+>+> <+do<++>+>

snippet pa
	params[:${1:id}]${2}

snippet trc
	t.remove :${1:column}

snippet rps
	render :partial => "${1:item}", :status => ${2:500}

snippet mrc
	remove_column :${1:column}

snippet vi
	validates_inclusion_of :${1:attribute}, :in => ${2}

snippet vl
	validates_length_of :${1:attribute}, :within => ${2:3}..${3:20}

snippet rpl
	render :partial => "<+item+>", :locals => { :<+item+> => <+@<+item+>+><++> }

snippet asrj
	assert_rjs :<+replace+>, <+"<+dom id+>"+>

snippet tcf
	t.float :${1:value}

snippet tct
	t.text :${1:body}

snippet tctss
	t.timestamps
	${1}

snippet fl
	flash[:${1:notice}] = "${2}"

snippet mccc
	t.column :${1:title}, :${2:string}

snippet artp
	assert_redirected_to <+<+model+>_path(<+@<+model+>+>)+>

snippet logi
	logger.info { "${1:message}" }${2}

snippet vn
	validates_numericality_of :${1:attribute}

snippet scp
	scope :${1}, lambda { |${2}| 
	  { 
	    :conditions => ${3},
	  } 
	}

snippet tre
	t.rename :${1}, :${2}

snippet ral
	render :action => "${1:action}", :layout => "${2:layoutname}"

snippet mrw
	mattr_accessor :${1:attr_names}

snippet defdestroy
	def destroy
		@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
		@$1.destroy
	
		redirect_to($1s_url) 
	end${3}

snippet logw
	logger.warn { "${1:message}" }${2}

snippet wants
	wants.<+js|xml|html+> <+{ <++> }+>

snippet vc
	validates_confirmation_of :${1:attribute}

snippet rns
	render :nothing => ${1:true}, :status => ${2:401}

snippet vf
	validates_format_of :${1:attribute}, :with => /${2:regex}/

snippet ist
	<%= image_submit_tag("<+agree.png+>"<+<+, :id => "<+id+>"+><+, :name => "<+name+>"+><+, :class => "<+class+>"+><+, :disabled => <+false+>+>+>) %>

snippet rp
	render :partial => "${1:item}"

snippet asd
	assert_difference "${1:Model}.${2:count}", $1 do
		${3}
	end

snippet loge
	logger.error { "${1:message}" }${2}

snippet sha1
	Digest::SHA1.hexdigest(${1:string})

snippet mcc
	change_column :${1:table}, :${2:column}, :${3:type}

snippet ril
	render :inline => "${1:<%= 'hello' %>}", :locals => { ${2::name} => "${3:value}"${4} }

snippet tcdt
	t.datetime :${1:title}

snippet logf
	logger.fatal { "${1:message}" }${2}

snippet habtm
	has_and_belongs_to_many :${1:object}, :join_table => "${2:table_name}", :foreign_key => "${3}_id"${4}

snippet rl
	render :layout => "${1:layoutname}"

snippet tcti
	t.time :${1:title}
	${2}

snippet rt
	render :text => "${1:text to render}"

snippet bf
	before_filter :${1:method}

snippet tch
	t.change :${1}, :${2:string}

snippet ho
	has_one :${1:object}

snippet mrnc
	rename_column :${1:table}, :${2:old}, :${3:new}

snippet defedit
	def edit
	end

snippet i18
	I18n.t('${1:type.key}')${2}

snippet rf
	render :file => "${1:filepath}"

snippet tci
	t.integer :${1:id}

snippet asre
	assert_response :${1:success}, @response.body${2}

snippet tcb
	t.boolean :${1:truthly}

